/*
 * JEB Copyright PNF Software, Inc.
 * 
 *     https://www.pnfsoftware.com
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.pnfsoftware.pleaseRop;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;


import com.pnfsoftware.pleaseRop.PleaseRopUnit;
import com.pnfsoftware.jeb.core.IEnginesContext;
import com.pnfsoftware.jeb.core.IEnginesPlugin;
import com.pnfsoftware.jeb.core.IOptionDefinition;
import com.pnfsoftware.jeb.core.IPluginInformation;
import com.pnfsoftware.jeb.core.IRuntimeProject;
import com.pnfsoftware.jeb.core.PluginInformation;
import com.pnfsoftware.jeb.core.RuntimeProjectUtil;
import com.pnfsoftware.jeb.core.Version;
import com.pnfsoftware.jeb.core.units.code.ICodeUnit;
import com.pnfsoftware.jeb.util.logging.GlobalLog;
import com.pnfsoftware.jeb.util.logging.ILogger;

import java.io.File;
import org.apache.commons.configuration2.BaseConfiguration;

import com.pnfsoftware.jeb.core.Artifact;
import com.pnfsoftware.jeb.core.ICoreContext;
import com.pnfsoftware.jeb.core.ILiveArtifact;
import com.pnfsoftware.jeb.core.JebCoreService;
import com.pnfsoftware.jeb.core.dao.IDataProvider;
import com.pnfsoftware.jeb.core.dao.IFileDatabase;
import com.pnfsoftware.jeb.core.dao.IFileStore;
import com.pnfsoftware.jeb.core.dao.impl.DataProvider;
import com.pnfsoftware.jeb.core.dao.impl.JEB2FileDatabase;
import com.pnfsoftware.jeb.core.dao.impl.SimpleFSFileStore;
import com.pnfsoftware.jeb.core.input.FileInput;
import com.pnfsoftware.jeb.core.properties.IConfiguration;
import com.pnfsoftware.jeb.core.properties.impl.CommonsConfigurationWrapper;
import com.pnfsoftware.jeb.core.units.IUnit;

/**
 * 
 * 
 * @author Nicolas Falliere and Hugo Genesse
 * 
 */
public class PleaseRopPlugin {
    static final ILogger logger = GlobalLog.getLogger(PleaseRopPlugin.class);
    static {
        GlobalLog.addDestinationStream(System.out);
    }

    private static final String licenseKey = "7937248408246830299Z2353839666";

    private static final String baseDir = "/home/svieg/work/soho/firmwares/DVRF/_DVRF_v03.bin.extracted/squashfs-root/lib/";

    public static void main(String[] argv) throws Exception {
        if(argv.length <= 0) {
            return;
        }

        String location = argv[0];
        List<File> files = AutoUtil.retrieveFiles(location);
        
        // create or retrieve a core context (engines container)
        ICoreContext core = JebCoreService.getInstance(licenseKey);

        // create an engines context (project container)
        IFileDatabase projectdb = new JEB2FileDatabase(baseDir);
        IFileStore filestore = new SimpleFSFileStore(baseDir);
        BaseConfiguration baseConfig = new BaseConfiguration();

        // TODO: customize (alternative is to read your configuration from .cfg file)
        //cfg.setProperty(".DevPluginClasspath", "...");

        // TODO: customize
        //cfg.setProperty(".DevPluginClassnames", "...");

        IConfiguration config = new CommonsConfigurationWrapper(baseConfig);
        IDataProvider dataProvider = new DataProvider(null, projectdb, filestore, null, null, config);
        IEnginesContext engctx = core.createEnginesContext(dataProvider, null);

        int i = 0;
        for(File file: files) {
            i++;
            logger.info("Finding ROP gadgets on: %s ...", file.getName());

            // create or load a project (artifact container)
            IRuntimeProject prj = engctx.loadProject("ld-uClibc.so.0" + i);

            // process the artifact, get units
            ILiveArtifact art = prj.processArtifact(new Artifact(file.getName(), new FileInput(file)));

            // proceed with the units
            List<IUnit> units = art.getUnits();
            List<ICodeUnit> codeUnits = new ArrayList<>();
            
            for (IUnit unit: units) {
                
                if (unit instanceof ICodeUnit) {
                    
                    codeUnits.add((ICodeUnit)unit);
                    
                }
                
            }
            
           
            new PleaseRopUnit(codeUnits);

            engctx.unloadProject(prj.getKey());
        }

        // close the engines
        JebCoreService.getInstance().closeEnginesContext(engctx);
    }
}
